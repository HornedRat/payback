shiny::runApp('~/R/Debt balancer/Payback')
gs_auth()
pointer <- gs_url('https://docs.google.com/spreadsheets/d/1aDyGgixKVlqRkbY7uDEaDTLKZ0ziNpEYZ_vaD7Wfx74')
data <- gs_read(pointer)
users <- colnames(data)[-(1:3)]
View(data)
#creating table with all spends and debts
#spends
spends <- data %>%
group_by(Paid_by) %>%
summarise(spend = sum(Amount)) %>%
rename(user = Paid_by)
#debts
debts <- data %>%
mutate(all = rowSums(.[4:ncol(data)])) %>%
gather(key = "user", value = "part", -Name, -Amount, -Paid_by, -all) %>%
mutate(debt = (part / all) * Amount) %>%
group_by(user) %>%
summarise(debt = sum(debt))
#join
balance <- spends %>%
full_join(debts) %>%
mutate_if(is.numeric,coalesce,0) %>%
mutate(current_balance = spend - debt) %>%
select(user, current_balance)
balance_i <- balance
#payback algorythm
while (sum(balance_i$current_balance^2) >= 0.001) {
#getting the most debted user
balance_i <- balance_i %>%
arrange(current_balance)
paying <- balance_i[1,]
#getting the user, that has most money to collect
receiving <- balance_i[nrow(balance),]
if (receiving$current_balance >= paying$current_balance) {
amount_paid <- paying$current_balance
} else {
amount_paid <- receiving$current_balance
}
print(paste("Użytkownik", paying$user, "oddaje", abs(round(amount_paid,2)), "użytkownikowi", receiving$user))
#correcting the current balance
balance_i[1,2] <- balance_i[1,2] - amount_paid
balance_i[nrow(balance),2] <- balance_i[nrow(balance),2] + amount_paid
}
print("Rozliczono!")
View(balance)
View(data)
View(spends)
View(debts)
?rowSums
#creating table with all spends and debts
#spends
spends <- data %>%
group_by(Paid_by) %>%
summarise(spend = sum(Amount)) %>%
rename(user = Paid_by)
#debts
debts <- data %>%
mutate(all = rowSums(.[4:ncol(data)], na.rm = T)) %>%
gather(key = "user", value = "part", -Name, -Amount, -Paid_by, -all) %>%
mutate(debt = (part / all) * Amount) %>%
group_by(user) %>%
summarise(debt = sum(debt, na.rm = T))
View(debts)
#join
balance <- spends %>%
full_join(debts) %>%
mutate_if(is.numeric,coalesce,0) %>%
mutate(current_balance = spend - debt) %>%
select(user, current_balance)
balance_i <- balance
#payback algorythm
while (sum(balance_i$current_balance^2) >= 0.001) {
#getting the most debted user
balance_i <- balance_i %>%
arrange(current_balance)
paying <- balance_i[1,]
#getting the user, that has most money to collect
receiving <- balance_i[nrow(balance),]
if (receiving$current_balance >= paying$current_balance) {
amount_paid <- paying$current_balance
} else {
amount_paid <- receiving$current_balance
}
print(paste("Użytkownik", paying$user, "oddaje", abs(round(amount_paid,2)), "użytkownikowi", receiving$user))
#correcting the current balance
balance_i[1,2] <- balance_i[1,2] - amount_paid
balance_i[nrow(balance),2] <- balance_i[nrow(balance),2] + amount_paid
}
print("Rozliczono!")
install.packages("googlesheets")
shiny::runApp()
install.packages('rsconnect')
install.packages("rsconnect")
library(googlesheets)
?gs_auth
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
